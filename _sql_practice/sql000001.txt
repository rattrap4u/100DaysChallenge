Database :- 
It is a collection of data in format that can be easily accessed.
A software application used to manage our DB is called DBMS

Types of Databases

1. Relational Database (RDBMS)
    - Data stored in tables.
    - MySQL, SQL Server, Oracle, PostgreSQL

2. Non Relational Database (NoSQL)
    - Data not stored in tables.
    - MongoDB

SQL :-
* Structured Query Language is a domain-specific language used to manage data, especially in a relational database management system. It is particularly useful in handling structured data.

- It is used to perform CRUD (Create, Read, Update, Delete) operations.
- 



To create a database
- Create database DatabaseName;

Drop :- is used to delete the table, column or database. 

The DROP command serves multiple purposes:

- DROP DATABASE: Deletes an entire database along with all its tables and data.
- DROP TABLE: Deletes a specific table from a database.
    - DROP DATABASE database_name;

- DROP TABLE: Removes a specific table and all its associated data.
    - DROP TABLE table_name;

- DROP COLUMN: Deletes a column from an existing table.
    - ALTER TABLE table_name DROP COLUMN column_name;

- DROP INDEX: Removes an index from a table.
    - DROP INDEX index_name ON table_name;

- DROP CONSTRAINT: Deletes a constraint from a table.
    - ALTER TABLE table_name DROP CONSTRAINT constraint_name;

======================Key Points of Drop=====================

1. Irreversibility: The DROP command is irreversible; once executed, the data and structure are permanently lost25.

2. Caution Required: Always ensure that backups are taken before using the DROP command to prevent accidental data loss26.

3. Impact on Relationships: Dropping a table invalidates all relationships and references to that table in other tables24.

4. Multiple Drops: You can drop multiple tables in one command by listing them separated by commas:

    --  DROP TABLE table1, table2;



DROP Command
The DROP command is used to completely remove an entire table or database from the database management system (DBMS). This action includes the deletion of all data, indexes, triggers, and constraints associated with that table or database.
Key Characteristics:
Type: Data Definition Language (DDL)
Rollback Capability: Not possible; once executed, the action is permanent.
Speed: Generally slower due to the overhead of removing the structure.
Use of WHERE Clause: Not applicable; it removes the entire table or database.
Impact on Indexes: All indexes associated with the table are removed.
Integrity Constraints: Removed along with the table structure.


DELETE Command
The DELETE command allows for the removal of specific rows from a table based on conditions defined in a WHERE clause. This means you can selectively delete records without affecting the entire table.
Key Characteristics:
Type: Data Manipulation Language (DML)
Rollback Capability: Possible; can be rolled back if wrapped in a transaction.
Speed: Slower than TRUNCATE, as it deletes rows one by one and logs each deletion.
Use of WHERE Clause: Required to specify which rows to delete.
Impact on Indexes: Indexes remain intact; only the data is affected.
Integrity Constraints: Remain intact unless explicitly dropped.


TRUNCATE Command
The TRUNCATE command is used to remove all rows from a table while retaining its structure for future use. Unlike DELETE, it does not log individual row deletions, which makes it significantly faster.
Key Characteristics:
Type: Data Definition Language (DDL)
Rollback Capability: Not possible; once executed, the action is permanent.
Speed: Faster than DELETE, as it deallocates entire data pages without logging individual deletions.
Use of WHERE Clause: Not applicable; it removes all rows without conditions.
Impact on Indexes: Indexes remain intact; only data is affected.
Integrity Constraints: Remain intact; constraints are preserved.




==========In summary==========

+ Use DROP when you want to completely remove a table or database along with all its associated data and structures.

+ Use DELETE when you need to remove specific records based on defined conditions, allowing for rollback if necessary.

+ Use TRUNCATE when you want to quickly remove all records from a table while preserving its structure for future use.




==========SQL Datatypes==========
=================================
1. char - string(0,255) can store Characters of fixed length
            above will take all the mentioned space and the remaining space will be reserved or will be left unoccupied or wasted
            for ex. let say we take name char(20) if i store tushar  in it then it will take 6 space and remaining 14 space will be reserved and unutilized/wasted.
- Can be faster for fixed-length data because its fixed size simplifies storage and retrieval operations.

-  Best suited for storing data that is consistently of the same length, such as:
    Fixed-length codes (e.g., country codes)
    Identifiers (e.g., social security numbers) 

2. varchar - string(0,255) can store Characters up to given length
             it can hold up to n characters but uses only as much space as needed for the actual string, plus one or two bytes for storing the length of the string.

-  May have slightly slower performance compared to CHAR due to the overhead of managing variable lengths.

-  Ideal for storing data with varying lengths, such as:
    Names
    Email addresses
    Descriptions

3. Blob  - it is used to store binary data like images, audio, video etc.
    can store upto 65,535 bytes upto 64 kb

    other types of BLOB are TINYBLOB(0,255)upto 255bytes, BLOB(0,65535) upto 64KB, MEDIUMBLOB(0,16,777,215) upto 16mb, LONGBLOB(0,4,294,967,295) upto 4gb

    ex. Video BLOB(65535)

4.  int 2147483648  32 bit,
    tiny int 127
    big int 64bit

5. Boolean  - it is used to store true or false values to implement boolean we use in the form of binary i.e. 0 and 1
    to represent boolean we use tiny int 

6. Float  - it is used to store decimal values
it can store upto 23 decimal places

7. Double   - it is used to store decimal values
 it can store upto 24-53 decimal places

8. Date   - it is used to store date values
it can store upto 1000-01-01 to 9999-12-31

9. Year 




SQL Datatypes
---------------

Signed and Unsigned within the ranges.

Types of SQL Commands
------------------------
DDL(Data Definition Language) : create, alter, rename, truncate & drop.
DQL( Data Query Language) : select.
DML(Data Manipulation Language) : insert, update, delete.
DCL(Data Control Language) : grant, revoke permission to users
TCL( Transaction Control Language) : start transaction, commit, rollback, savepoint.



Database related queries
--------------------------

create Database db_name;

create Database if not exists db_name;

create Database if not exists college;

drop database db_name;
drop database if exists db_name;

show database;
show tables;

use db_name;
use college;


Table related Queries
=====================

create table table_name (
    rollno int primary key,
    name varchar(25)
);


Table related Queries
=====================
+++++++++++++SELECT+++++++++++++

select * from table_name;
select * from students;

+++++++++++++INSERT+++++++++++++

insert into  table_name (col1, col2, col3) values (),();

insert into students (rollno, name) values (101, "Tushar"), (102, "Rohan");




------------------------------------------
~~~~~~~~~~~~~~~~~~Practice~~~~~~~~~~~~~~~~
------------------------------------------

Create a database for your company named XYZ.

1. create a table inside this db to store employee info(id, name, salary)
2. add values inside the table 
3. select and view all the table data.


solution: - 

create database if not exists xyz;
create table employee(
id int primary key,
name varchar(20),
salary decimal(10,2)
);

insert into employee(id, name, salary) values (1, "Ram", 25503.56), (2, "Shyam", 40565.78), (3,"Ghanshyam", 19458.63);

select * from employee;



==============================================
~~~~~~~~~~~~~~~~~~~~~KEYS~~~~~~~~~~~~~~~~~~~~~
----------------------------------------------


1. Primary KEYS
---------------

 Primary key is a column or set of columns in a table that uniquely identifies each record in a table. 

 There should be  only one primary key in a table and it should be NOT null.
 
2. Foreign KEYS
---------------

 Foreign key  is a column or set of columns in a table that refers to the primary key of another table.

 There can be multiple  foreign keys in a table.
 Foreign keys can have duplicate and null values.


 
----------------------------------------------
~~~~~~~~~~~~~~~~~~CONSTRAINT~~~~~~~~~~~~~~~~~~ 
----------------------------------------------

not null
unique
default
check


------------
Primary key
------------

They are used to specify rules for data in a table.

- NOT NULL  - columns cannot have a null value       id int not null
- UNIQUE    - all values in column are different     id int unique
- PRIMARY KEY   - makes a column unique and not null but used only for one    id int Primary Key

create table temp1 (
    id int,
    name varchar(20),
    age int,
    city varchar(20),
    primary key(id)
);



------------
Foreign key
------------

It prevents actions that would destroy links between tables.

create table temp2 (
    cust_id int,
    foreign key (cust_id) refrences customer(id)
);

default -  sets the default value of a column
            in this if a user doesn't enter the value of the row then it will automatically put the existing value mentioned earlier.

        salary int default 25000;


check   -  it can limit the values allowed in a column.

create table city(
    id int primary key,
    city varchar(50),
    age int,
    constraint age_check check (age >=18 and city='Delhi')
);

create table temp3 (
    age int check (age >= 18)
);


===================================================================
===================================================================
~~~~~~~~~~~~~~~~~Now Creating Database to Practice~~~~~~~~~~~~~~~~~
===================================================================
===================================================================

create database if not exists college;

use college;

create table student(
	roll int primary key,
    name varchar(20),
    marks int not null,
    grade varchar(1),
    city varchar(20)
);

insert into student (roll, name, marks, grade, city) 
	values 
	(101, "Ram", 78, "C", "Pune"),
	(101, "Shyam", 93, "A", "Delhi"),
	(101, "Hanuman", 85, "B", "Mumbai"),
	(101, "Bharat", 98, "A", "Kolkata"),
	(101, "Krishna", 7, "F", "Mumbai"),
	(101, "Shiva", 82, "B", "Delhi");



====================
~~~~~~~SELECT~~~~~~~
====================
Select is used to select any from the database.

SELECT col1, col2 from table_name;

to select all 

SELECT * from table_name;

select distinct city from student;



=====================
~~~~~~~~WHERE~~~~~~~~
=====================

To define some conditions.

select col1, col2 from table_name where conditions;

select * from student where marks > 80;

select * from student where city = "Pune";


==============================
~~~Using Operators in WHERE~~~
==============================

Arithmetic Operators:  +, -, *, /, %
Comparison Operators: =, !=, >, <, >=, <=
Logical Operators: AND, OR, NOT, IN, BETWEEN, ALL, LIKE, ANY
Bitwise Operators: &(Bitwise AND), |(Bitwise OR)

select * from students where marks+10 > 100;

select * from student where marks > 80 and city = "Mumbai";
select * from student where marks > 80 or city = "Kolkata";
select * from student where marks between 80 and 90;
select * from student where city in ("Mumbai", "Kolkata");
This query will include the rows where ever the city is Mumbai and Kolkata.
select * from student where city not in ("Mumbai", "Kolkata");
This query will exclude the rows where ever the city is Mumbai and Kolkata.



==============================
~~~~~~~~~Limit Clause~~~~~~~~~
==============================

sets an upper limit on number of (tuples) rows to be returned.

select * from student limit 3;



==============================
~~~~~~~~~~~Order by~~~~~~~~~~~
==============================

To sort in ascending (ASC) or descending order (DESC)

select * from student  order by marks asc;
select * from student  order by marks desc;
select * from student  order by city asc;
select * from student  order by city desc limit 2;



=========================================
~~~~~~~~~~~Aggregate Functions~~~~~~~~~~~
=========================================

Aggregate functions perform a calculation on a set of values, and return a single value.
- COUNT()     - select count(roll) from student
- MAX()       - select max(marks) from student;
- MIN()       - select max(marks) from student;
- SUM()       - select sum(marks) from student;
- AVG()       - select avg(marks) from student;


==============================
~~~~~~~~~~~Group by~~~~~~~~~~~
==============================

Groups rows that have that same values into summary rows. 
It collects data from multiple records and groups the result by one or more column.

Generally we use group by with some aggregation function.

-  select city, count(name) from student group by city;
-  select city, count(roll) from student group by city;

we need to add all the columns mentioned after select  keyword in group by clause also.

-  select city, name, count(roll) from student group by city, name;




==============================
~~~~~~~~~~~Practice~~~~~~~~~~~
==============================

Write the query to find avg marks in each city in ascending order.

select city, avg(marks) from student  group by city order by avg(marks) asc;

select mode, count(customer) from payment group by mode;

select grade, count(name) from student group by grade order by grade;




===================================
~~~~~~~~~~~Having Clause~~~~~~~~~~~
===================================


Similar to Where i.e. applies some condition on rows. i.e. to apply conditions on group of rows.
Used when we want to apply any condition after grouping.

Count number of students in each city where max marks cross 90.

select city, count(name) from student group by city having max(marks) > 90;

select city, count(roll) from student group by city having max(marks) > 90;



===================================
~~~~~~~~~~~General Order~~~~~~~~~~~
===================================

SELECT column(s) FROM table_name WHERE condition GROUP BY column(s) HAVING condition ORDER BY column(s) ASC/DESC;


~ where applies condition on rows 
~ having applies condition on groups

~ where is put before group by and having is put after group by.


select city from student where grade="A" group by city having max(marks) > 90 order by asc;


===========================================
~~~~~~~~~~~Table Related queries~~~~~~~~~~~
===========================================

Update - To update existing rows
````````````````````````````````

update table_name set col1=val1, col2=val2 where condition;

update student set grade="O" where grade="A";



=============================================================
-------------------------------------------------------------
To disable safe mode in SQL  to avoid making big changes that would affect the data.

~  SET SQL_SAFE_UPDATES=0;    
using this makes safe mode off.

~  SET SQL_SAFE_UPDATES=1;    
using this makes safe mode on again.


-------------------------------------------------------------
=============================================================


update student set marks=82 where roll=105;

update student set marks = marks + 1;


Delete - To delete existing rows
````````````````````````````````

Delete from table_name where condition;

DELETE from student WHERE marks < 33;

update student set marks =12 where roll = 105;

delete from student where marks < 33;

